#include <iostream>
using namespace std; 
const int N = 8;//размер стороны доски
int A[N][N];//шахм.доска
//"Кресты" - метка о запрете на постановку ферзя в данной ячейке

void draw_X(int n, int m)
{
	for (int j = 0; j < N; j++)//расставляет кресты по горизонтали
	{
		if (A[n][j] != -1) ++A[n][j];
	}
	for (int i = 0; i < N; i++)//расставляет кресты по вертикали
	{
		if (A[i][m] != -1) ++A[i][m];
	}
	//далее 2 цикла - расстановка крестов на диагонали элемента-ферзя с левого верхнего угла до правого нижнего
	int j = m - 1;//расставляет кресты по диагонали от элемента влево вверх
	for (int i = n - 1; i >= 0 && j >= 0; i--)
	{
		++A[i][j];
		j--;
	}
	j = m + 1;//расставляет кресты по диагонали от элемента вправо вниз
	for (int i = n + 1; i < N && j < N; i++)
	{
		++A[i][j];
		j++;
	}

	//далее 2 цикла - расстановка крестов на диагонали элемента-ферзя с левого нижнего угла до правого верхнего
	j = m + 1;//расставляет кресты по диагонали от элемента вправо вверх
	for (int i = n - 1; i >= 0 && j < N; i--)
	{
		++A[i][j];
		j++;
	}
	j = m - 1;//расставляет кресты по диагонали от элемента вправо вниз
	for (int i = n + 1; i < N && j >= 0; i++)
	{
		++A[i][j];
		j--;
	}
}
 void delete_X(int &n, int &m)
{
	for (int j = 0; j < N; j++)//убирает кресты с горизонтали
	{
		if (A[n][j] != -1) --A[n][j];
	}
	for (int i = 0; i < N; i++)//убирает кресты с вертикали
	{
		if (A[i][m] != -1) --A[i][m];
	}
	//далее 2 цикла - удаление крестов с диагонали элемента-ферзя с левого верхнего угла до правого нижнего
	int j = m - 1;//убирает кресты с диагонали от элемента влево вверх
	for (int i = n - 1; i >= 0 && j >= 0; i--)
	{
		--A[i][j];
		j--;
	}
	j = m + 1;//убирает кресты с диагонали от элемента вправо вниз
	for (int i = n + 1; i < N && j < N; i++)
	{
		--A[i][j];
		j++;
	}

	//далее 2 цикла - удаление крестов с диагонали элемента-ферзя с левого нижнего угла до правого верхнего
	j = m + 1;//убирает кресты с диагонали от элемента вправо вверх
	for (int i = n - 1; i >= 0 && j < N; i--)
	{
		--A[i][j];
		j++;
	}
	j = m - 1;//убирает кресты с диагонали от элемента вправо вниз
	for (int i = n + 1; i < N && j >= 0; i++)
	{
		--A[i][j];
		j--;
	}
	++A[n][m];//ставим 0 (нач.положение ячейки) вместо ферзя
	j = m + 1;
	while (A[n][j] != 0 && j < N)//ищем, есть ли еще свободная ячейка в строке
	{
		++j;
	}
	if (j == N)//если нет, то удаляем и кресты от ферзя выше
	{
		n = n - 1;
		for (int i = 0; i < N; i++)//ищем столбец, в котором расположен ферзь выше
		{
			if (A[n][i] == -1) 
			{
				m = i; break;
			}
		}
		delete_X(n, m);
	}
	else
	{
		m = j;
	}
}
void ferz(int n, int m)
{
	if (A[n][m] == 0)//проверка на свободную ячейку
	{
		A[n][m] = -1;//постановка ферзя
		draw_X(n, m);//расстановка крестов после постановки ферзя
		int j = 0;
		if (n < N - 1)
		{
			while (A[n + 1][j] != 0 && j < N)//ищем индекс столбца след.свободной ячейки
			{
				++j;
			}
			if (j == N)//если не нашлось такого индекса (то есть вся строчка состоит из Х)
			{
				delete_X(n, m);//удаляем кресты, которые проставил этот ферзь + запоминаем новые м и н для расстановки ферзя
				ferz(n, m);
			}
			else
			{
				m = j;
				ferz(n + 1, m);
			}
		}
	}
}
int main()
{
	setlocale(LC_ALL, "Rus");
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			A[i][j] = 0;
		}
	}
	ferz(0,0);
	for (int i = 0; i < N; i++)//печать вывода
	{
		for (int j = 0; j < N; j++)
		{
			if (A[i][j] == -1) cout << "Q";
			else cout << ".";
		}
		cout << endl;
	}
	system("pause");
}